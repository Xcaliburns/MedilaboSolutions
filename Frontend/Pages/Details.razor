@page "/details/{id:int}"
@using Frontend.Models
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Patient Details</PageTitle>

<h1>Détails du patient</h1>

@if (!isAuthenticated)
{
    <p>Veuillez vous connecter pour accéder aux détails du patient.</p>
    <button @onclick="NavigateToLogin">Se connecter</button>
}
else
{
    @if (patient == null)
    {
        <p><em>Pas de patient selectionné</em></p>
    }
    else
    {
        <div>
            <label>Nom: </label>
            <input @bind="patient.Nom" />
        </div>
        <div>
            <label>Prénom: </label>
            <input @bind="patient.Prenom" />
        </div>
        <div>
            <label>Date de Naissance: </label>
            <input type="date" @bind="patient.DateDeNaissance" />
        </div>
        <div>
            <label>Genre: </label>
            <input @bind="patient.Genre" />
        </div>
        <div>
            <label>Adresse: </label>
            <input @bind="patient.Adresse" />
        </div>
        <div>
            <label>Téléphone: </label>
            <input @bind="patient.Telephone" />
        </div>
        <button @onclick="SaveChanges">Enregistrer</button>
        @if (!string.IsNullOrEmpty(securityMessage))
        {
            <p style="color:red;">@securityMessage</p>
        }
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Patient? patient;
    private bool isAuthenticated = false;
    private string? securityMessage;

    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("AuthenticatedClient");
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (!string.IsNullOrEmpty(token))
        {
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            patient = await client.GetFromJsonAsync<Patient>($"https://localhost:7214/patient/{Id}");
            isAuthenticated = true;
        }
        else
        {
            isAuthenticated = false;
        }
    }

    private async Task SaveChanges()
    {
        var client = ClientFactory.CreateClient("AuthenticatedClient");
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (!string.IsNullOrEmpty(token))
        {
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await client.PutAsJsonAsync($"https://localhost:7214/patient/edit/{Id}", patient);
            Navigation.NavigateTo("/");
        }
        else
        {
            isAuthenticated = false;
            securityMessage = "Par mesure de sécurité, nous vous invitons à vous connecter à nouveau.";
        }
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}
